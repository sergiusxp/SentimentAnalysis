// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PowerFeedbackClientServer.Models;

namespace PowerFeedbackClientServer.Migrations
{
    [DbContext(typeof(PfDbContext))]
    partial class PfDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PowerFeedbackClientServer.DTOs.Sentiment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactId");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL");

                    b.ToTable("Sentiments");
                });

            modelBuilder.Entity("PowerFeedbackClientServer.Models.Contact", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int>("ContactType");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RequestDate");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("PowerFeedbackClientServer.Models.KeyPhrase", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<string>("SentimentId");

                    b.HasKey("Id");

                    b.HasIndex("SentimentId");

                    b.ToTable("KeyPhrases");
                });

            modelBuilder.Entity("PowerFeedbackClientServer.Models.TextEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("SentimentId");

                    b.Property<string>("SubType");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SentimentId");

                    b.ToTable("TextEntities");
                });

            modelBuilder.Entity("PowerFeedbackClientServer.Models.TextEntityMatch", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TextEntityId");

                    b.HasKey("Id");

                    b.HasIndex("TextEntityId");

                    b.ToTable("TextEntitiesMatch");
                });

            modelBuilder.Entity("PowerFeedbackClientServer.DTOs.Sentiment", b =>
                {
                    b.HasOne("PowerFeedbackClientServer.Models.Contact", "Contact")
                        .WithOne("Sentiment")
                        .HasForeignKey("PowerFeedbackClientServer.DTOs.Sentiment", "ContactId");
                });

            modelBuilder.Entity("PowerFeedbackClientServer.Models.KeyPhrase", b =>
                {
                    b.HasOne("PowerFeedbackClientServer.DTOs.Sentiment", "Sentiment")
                        .WithMany()
                        .HasForeignKey("SentimentId");
                });

            modelBuilder.Entity("PowerFeedbackClientServer.Models.TextEntity", b =>
                {
                    b.HasOne("PowerFeedbackClientServer.DTOs.Sentiment", "Sentiment")
                        .WithMany()
                        .HasForeignKey("SentimentId");
                });

            modelBuilder.Entity("PowerFeedbackClientServer.Models.TextEntityMatch", b =>
                {
                    b.HasOne("PowerFeedbackClientServer.Models.TextEntity", "TextEntity")
                        .WithMany()
                        .HasForeignKey("TextEntityId");
                });
#pragma warning restore 612, 618
        }
    }
}
